app-id: io.github.tobagin.KeySmith
runtime: org.gnome.Platform
runtime-version: '46' # Or your target GNOME version
sdk: org.gnome.Sdk
sdk-extensions:
  - org.freedesktop.Sdk.Extension.rust-stable # If needed for any dependencies in the future
command: keysmith

# Optional: For enabling translations with Weblate or similar
# x-translation: KeySmith

finish-args:
  # Filesystem access
  - --filesystem=host:ro # To read ~/.ssh, consider making it more specific if possible
  - --filesystem=xdg-run/dconf # For GSettings
  - --filesystem=xdg-config/kdeglobals:ro # For KDE theme integration (optional)

  # Wayland and X11 access
  - --socket=wayland
  - --socket=fallback-x11

  # D-Bus access
  - --talk-name=org.freedesktop.secrets # If you plan to use system's secret service
  # - --talk-name=org.gnome.keyring # Alternative for GNOME Keyring

  # Network access (if your app needs it, e.g., for ssh-copy-id)
  # For ssh-copy-id, it will likely need to execute `ssh` which needs network.
  - --share=network # Broad network access.
  # Consider if --socket=ssh-agent would be useful/necessary for ssh operations.

  # Access to ssh-agent
  - --socket=ssh-agent

  # Allow running ssh, ssh-keygen, ssh-copy-id
  # This is crucial for the app's functionality.
  # We might need to bundle these if not available in the runtime,
  # or ensure the runtime provides them.
  # For now, assume they are available in the path.
  - --talk-name=org.freedesktop.Flatpak # To potentially spawn commands outside sandbox if needed & permitted

build-options:
  append-path: /usr/lib/sdk/rust-stable/bin # If rust is used
  # cflags: -O2 -g
  # cppflags: -O2 -g
  # ldflags: -Wl,-z,relro,-z,now
  env:
    # RUST_BACKTRACE: '1'
    # RUST_LOG: "info"
    PYTHONPATH: /app/lib/python3.11/site-packages:/app/lib # Adjust Python version as per runtime

modules:
  # Python base dependencies
  - name: python3-pygobject
    buildsystem: simple
    build-commands:
      # This module typically would be a shared-module or part of the runtime.
      # If building manually, it's complex.
      # For now, assume pygobject is sufficiently provided by the GNOME SDK.
      # If not, we'd need to build it or use a flatpak-pip-generator approach.
      - echo "Assuming PyGObject is provided by the SDK"
    sources: [] # Placeholder

  # Main application build
  - name: keysmith
    buildsystem: meson
    sources:
      - type: dir
        path: .
    config-opts:
      - --prefix=/app
      # -Dprofile=release # Enable for release builds

# Optional: If you have shared modules from other Flatpak manifests
# shared-modules:
#   - ...

# Optional: Cleanup steps
# cleanup:
#   - /include
#   - /lib/pkgconfig
#   - /man
#   - /share/doc
#   - /share/gtk-doc
#   - /share/man
#   - /share/pkgconfig
#   - '*.la'
#   - '*.a'
